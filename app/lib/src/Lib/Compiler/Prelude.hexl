--------------------------------------------------------------------------------
-- | # General Functions

-- | The identity function does nothing and just returns its value.
id : forall a. a -> a
id x = x

-- | The function `const a` always returns `a`.
const : forall a b. b -> a -> b
const c _ = c

flip : forall a b c. (a -> b -> c) -> b -> a -> c
flip f b a = f a b

apply : forall a b. (a -> b) -> a -> b
apply f x = f x

-- | Apply the function on the left-hand side to the argument on the right-hand
-- | side.
infixr 0 apply as <|

applyFlipped : forall a b. a -> (a -> b) -> b
applyFlipped x f = f x

-- | Apply the function on the right-hand side to the argument on the left-hand
-- | side.
infixl 1 applyFlipped as |>

compose : forall a b c. (b -> c) -> (a -> b) -> a -> c
compose g f x = g (f x)

infixr 9 compose as <<<

composeFlipped : forall a b c. (a -> b) -> (b -> c) -> a -> c
composeFlipped f g x = g (f x)

infixr 9 composeFlipped as >>>

--------------------------------------------------------------------------------
-- | # Boolean Values

type Boolean
  = True
  | False

-- | Conjunction of two booleans. The result is true if both arguments are true.
conj : Boolean -> Boolean -> Boolean
conj x y = if x then y else False

infixr 3 conj as &&

-- | Disjunction of two booleans. The result is true if the first, the second,
-- | or both arguments are true.
disj : Boolean -> Boolean -> Boolean
disj x y = if x then True else y

infixr 2 disj as ||

-- | Negate a boolean value.
not : Boolean -> Boolean
not x = if x then False else True

--------------------------------------------------------------------------------
-- | # Numeric Values

interface Num x where
  add : x -> x -> x
  sub : x -> x -> x
  mul : x -> x -> x
  div : x -> x -> x
  one : x
  zero : x

infixl 6 add as +
infixl 6 sub as -
infixl 7 mul as *
infixl 7 div as /

implements Num Integer where
  add = prim_addInteger
  sub = prim_subInteger
  mul = prim_mulInteger
  div = prim_divInteger
  one = 1
  zero = 0

implements Num Number where
  add = prim_addNumber
  sub = prim_subNumber
  mul = prim_mulNumber
  div = prim_divNumber
  one = 1.0
  zero = 0.0

-- | For example, the expression `roundTo 2 n` rounds the number `n` to a
-- precision of `2`.
roundTo : Integer -> Number -> Number
roundTo = prim_roundTo

toNumber : Integer -> Number
toNumber = prim_toNumber

--------------------------------------------------------------------------------
-- | # Equality

-- | Interface of types where elements can be compared to each other.
interface Eq a where
  -- | Returns true if both arguments are equal.
  eq : a -> a -> Boolean

infix 4 eq as ==

implements Eq Integer where
  eq = prim_eqInteger

implements Eq Number where
  eq = prim_eqNumber

implements Eq String where
  eq = prim_eqString

implements Eq DateTime where
  eq = prim_eqDateTime

implements Eq (Row t) where
  eq = prim_eqRow

implements Eq Boolean where
  eq x y = case Pair x y of
    Pair True True   -> True
    Pair False False -> True
    _                 -> False

-- | Returns true if both arguments are not equal.
notEq : forall a. Eq a => a -> a -> Boolean
notEq a b = not <| a == b

infix 4 notEq as /=

--------------------------------------------------------------------------------
-- | # Ordering

-- | The type returned by `compare`.
type Ordering
  -- | Both elements are equal.
  = EQ
  -- | The first element is less than the second one.
  | LT
  -- | The first element is greater than the second one.
  | GT

-- | Interface of types that can be ordered.
interface Eq a => Ord a where
  -- | Compares two elements.
  compare : a -> a -> Ordering

implements Ord Number where
  compare = prim_compareNumber

implements Ord Integer where
  compare = prim_compareInteger

implements Ord DateTime where
  compare = prim_compareDateTime

-- | Returns true if the first argument is less than the second.
lessThan : forall a. Ord a => a -> a -> Boolean
lessThan a b = case compare a b of
  LT -> True
  _  -> False

infixl 4 lessThan as <

-- | Returns true if the first argument is more than the second.
greaterThan : forall a. Ord a => a -> a -> Boolean
greaterThan a b = case compare a b of
  GT -> True
  _  -> False

infixl 4 greaterThan as >

-- | Returns true if the first argument is less than or equal to the second.
lessThanOrEq : forall a. Ord a => a -> a -> Boolean
lessThanOrEq a b = case compare a b of
  GT -> False
  _  -> True

infixl 4 lessThanOrEq as <=

-- | Returns true if the first argument is more than or equal to the second.
greaterThanOrEq : forall a. Ord a => a -> a -> Boolean
greaterThanOrEq a b = case compare a b of
  LT -> False
  _  -> True

infixl 4 greaterThanOrEq as >=

min : forall a. Ord a => a -> a -> a
min a b = if a > b then b else a

max : forall a. Ord a => a -> a -> a
max a b = if a < b then b else a

--------------------------------------------------------------------------------
-- | # Pairs

type Pair a b = Pair a b

implements Eq a => Eq b => Eq (Pair a b) where
  eq (Pair a b) (Pair a' b') = a == a' && b == b'

--------------------------------------------------------------------------------
-- | # Lists

type List a
  = Nil
  | Cons a (List a)

implements Eq a => Eq (List a) where
  eq xs ys = case Pair xs ys of
    Pair Nil Nil                 -> True
    Pair (Cons a as) (Cons b bs) -> a == b && as == bs
    _                             -> False

member : forall a. Eq a => a -> List a -> Boolean
member x xs = case xs of
  Nil -> False
  Cons a as -> if x == a then True else member x as


-- | Calculates the sum over a list of numbers.
sum : forall a. Num a => List a -> a
sum xs = case xs of
  Nil -> zero
  Cons a as -> a + sum as

-- | Get the length of a list.
length : forall a. List a -> Integer
length xs = case xs of
  Nil -> 0
  Cons _ as -> 1 + length as

{- | Filter a list according to the given predicate. For example,

``` haskell
predicate x = x.Temperature >= 0 && x.Temperature <= 10
filter predicate #Cities
```

would filter the rows of the "Cities" table to include only those where the
temperature is between `0` and `10` degrees.
-}
filter : forall a. (a -> Boolean) -> List a -> List a
filter p xs = case xs of
  Nil -> Nil
  Cons a as ->
    let
      as' = filter p as
    in
      if p a then Cons a as' else as'

-- | Find the first element in a list that matches the given predicate, or return
-- | `Nothing`.
find : forall a. (a -> Boolean) -> List a -> Maybe a
find p xs = case xs of
  Nil -> Nothing
  Cons a as -> if p a then Just a else find p as

--------------------------------------------------------------------------------
-- | # Maybe Values

type Maybe a
  = Nothing
  | Just a

implements Eq a => Eq (Maybe a) where
  eq ma mb = case Pair ma mb of
    Pair Nothing Nothing   -> True
    Pair (Just a) (Just b) -> a == b
    _                       -> False

-- | The expression `maybe b f x` applies the function `f` to the content of x,
-- | or just returns `b`, if x is `Nothing`.
maybe : forall a b. b -> (a -> b) -> Maybe a -> b
maybe def f ma = case ma of
  Nothing -> def
  Just a -> f a

-- | The expression `fromMaybe 0 x` returns the content of x if there is one, or
-- | `0` in case of `Nothing`.
fromMaybe : forall a. a -> Maybe a -> a
fromMaybe def = maybe def id

--------------------------------------------------------------------------------
-- | # Either Values

type Either a b
  = Left a
  | Right b

implements Eq a => Eq b => Eq (Either a b) where
  eq e e' = case Pair e e' of
    Pair (Left a) (Left a')   -> a == a'
    Pair (Right b) (Right b') -> b == b'
    _                          -> False

either : forall a b c. (a -> c) -> (b -> c) -> Either a b -> c
either f g e = case e of
  Left a  -> f a
  Right b -> g b

--------------------------------------------------------------------------------
-- | # Containers

-- | Interface of types that represent "containers" which can be mapped over.
interface Functor f where
  -- | Apply a function to every element in the container `f` (e.g., a list),
  -- | and return the result.
  map : forall a b. (a -> b) -> f a -> f b

implements Functor List where
  map f xs = case xs of
    Nil -> Nil
    Cons a as -> Cons (f a) (map f as)

implements Functor Maybe where
  map f ma = case ma of
    Nothing -> Nothing
    Just a -> Just (f a)

implements Functor (Either a) where
  map f e = case e of
    Left a -> Left a
    Right b -> Right (f b)

--------------------------------------------------------------------------------
-- | # Appendable Values

-- | Interface of types where elements can be "appended" to one another.
interface Semigroup a where
  -- | Appends two values of `a` to get a new value of `a`. Example: `"Hello "
  -- | <> name`
  append : a -> a -> a

infixr 5 append as <>

implements Semigroup (List a) where
  append xs ys = case xs of
    Nil -> ys
    Cons a as -> Cons a (as <> ys)

implements Semigroup String where
  append = prim_appendString

--------------------------------------------------------------------------------
-- | # Printable Values

-- | Interface of types that can be converted into a `String`.
interface Print a where
  -- | Convert the argument into a string.
  print : a -> String

implements Print Boolean where
  print x = if x then "True" else "False"

implements Print Integer where
  print = prim_printInteger

implements Print Number where
  print = prim_printNumber

implements Print String where
  print = id

--------------------------------------------------------------------------------
-- | # Formatting

-- | A call like `formatNumber s x` formats the number `x` according to the
-- | format string `s`. For a list of formatting characters, see
-- | [here](https://hackage.haskell.org/package/base-4.9.0.0/docs/Text-Printf.html#v:printf).
formatNumber : String -> Number -> String
formatNumber = prim_formatNumber

-- | `formatDateTime s t` formats time `t` according to the format string `s`. For a
-- | list of formatting characters see
-- | [here](https://hackage.haskell.org/package/time-1.6.0.1/docs/Data-Time-Format.html#v:formatTime).
formatDateTime : String -> DateTime -> String
formatDateTime = prim_formatDateTime

--------------------------------------------------------------------------------
-- | # Date and Time

-- | Returns the year of a given time.
year : DateTime -> Integer
year = prim_year

-- | Returns the month of the year (1-12) of a given time.
month : DateTime -> Integer
month = prim_month

-- | Returns the day of the month (1-31) of a given time.
day : DateTime -> Integer
day = prim_day
